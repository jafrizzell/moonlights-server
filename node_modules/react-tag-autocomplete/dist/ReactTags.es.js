import i, { useContext as p, useMemo as T, useRef as m, useState as Q, useEffect as C, useReducer as de, useCallback as R } from "react";
function pe(e) {
  return e.selectionStart === 0 && e.selectionEnd === 0;
}
function fe(e) {
  const t = e.value.length;
  return e.selectionStart === t && e.selectionEnd === t;
}
function O(e) {
  return `${e}-label`;
}
function ve(e) {
  return `${e}-combobox`;
}
function ge(e) {
  return `${e}-input`;
}
function X(e) {
  return `${e}-listbox`;
}
function Y(e, t) {
  return `${e}-option-${ye(t)}`;
}
const me = /%value%/;
function D(e, t) {
  return e.replace(me, t);
}
const xe = /\s+/g;
function z(e) {
  return `${String(e.value)}-${e.label}`;
}
function ye(e) {
  return z(e).replace(xe, "_");
}
function w(e, t) {
  return t.findIndex(({ value: n }) => n === e.value);
}
const be = /[-\\^$*+?.()|[\]{}]/g;
function Z(e) {
  return e.replace(be, "\\$&");
}
function M(e) {
  return new RegExp(`${Z(e)}`, "i");
}
function Ee(e) {
  return new RegExp(`^${Z(e)}$`, "i");
}
function Ie(e) {
  const t = M(e);
  return (n) => t.test(n);
}
function he(e) {
  const t = Ee(e);
  return (n) => t.test(n);
}
function we(e, t) {
  if (e === "")
    return [].concat(t);
  {
    const n = Ie(e);
    return t.filter((o) => n(o.label));
  }
}
function Ce(e, t) {
  const n = he(e);
  return t.find((o) => n(o.label)) || null;
}
const d = i.createContext(void 0);
function Re() {
  const { comboBoxRef: e, id: t, manager: n } = p(d);
  return T(() => ({
    id: ve(t),
    ref: e,
    onBlur(o) {
      var a;
      (a = e.current) != null && a.contains(o.relatedTarget) || (n.collapse(), n.clearActiveIndex());
    },
    onFocus(o) {
      var a;
      (a = e.current) != null && a.contains(o.relatedTarget) || n.expand();
    },
    onClick() {
      n.state.isExpanded || n.expand();
    }
  }), [e, t, n]);
}
const b = {
  Enter: "Enter",
  Escape: "Escape",
  Tab: "Tab",
  Backspace: "Backspace",
  UpArrow: "ArrowUp",
  UpArrowCompat: "Up",
  DownArrow: "ArrowDown",
  DownArrowCompat: "Down",
  PageDown: "PageDown",
  PageUp: "PageUp"
}, j = Symbol("Create new tag"), ee = Symbol("No options"), W = () => {
}, De = {
  autoComplete: "off",
  autoCorrect: "off",
  "data-form-type": "other",
  spellCheck: !1
};
function Te({
  allowBackspace: e,
  allowTab: t,
  ariaDescribedBy: n,
  ariaErrorMessage: o
}) {
  const { id: a, inputRef: c, isDisabled: r, isInvalid: u, manager: s, onInput: f, onSelect: v } = p(d), y = T(() => {
    const A = (l) => {
      const I = l.currentTarget.value;
      s.updateValue(I), f == null || f(I);
    }, P = (l) => {
      s.state.isExpanded ? (l.preventDefault(), s.updateActiveIndex(s.state.activeIndex + 1)) : fe(l.currentTarget) && s.expand();
    }, N = (l) => {
      s.state.isExpanded ? (l.preventDefault(), s.updateActiveIndex(s.state.activeIndex - 1)) : pe(l.currentTarget) && s.expand();
    }, k = (l) => {
      s.state.isExpanded && (l.preventDefault(), s.updateActiveIndex(s.state.options.length - 1));
    }, _ = (l) => {
      s.state.isExpanded && (l.preventDefault(), s.updateActiveIndex(0));
    }, B = (l) => {
      s.state.isExpanded && (l.preventDefault(), v());
    }, U = () => {
      s.state.isExpanded ? (s.clearActiveIndex(), s.collapse()) : s.clearValue();
    }, V = () => {
      if (e) {
        const l = s.state.value === "", I = s.state.selected[s.state.selected.length - 1];
        l && I && v(I);
      }
    }, L = (l) => {
      t && s.state.isExpanded && (l.preventDefault(), v());
    };
    return { onChange: A, onKeyDown: (l) => {
      if (l.key === b.UpArrow)
        return N(l);
      if (l.key === b.DownArrow)
        return P(l);
      if (l.key === b.PageUp)
        return _(l);
      if (l.key === b.PageDown)
        return k(l);
      if (l.key === b.Enter)
        return B(l);
      if (l.key === b.Escape)
        return U();
      if (l.key === b.Backspace)
        return V();
      if (l.key === b.Tab)
        return L(l);
    } };
  }, [e, t, s, f, v]), { activeOption: E, isExpanded: x, value: S } = s.state;
  return {
    ...De,
    "aria-autocomplete": "list",
    "aria-activedescendant": E ? Y(a, E) : void 0,
    "aria-describedby": n || void 0,
    "aria-disabled": r,
    "aria-errormessage": u && o || void 0,
    "aria-invalid": u,
    "aria-labelledby": O(a),
    "aria-expanded": x,
    "aria-owns": X(a),
    id: ge(a),
    onChange: r ? W : y.onChange,
    onKeyDown: r ? W : y.onKeyDown,
    ref: c,
    role: "combobox",
    type: "text",
    value: S
  };
}
const Oe = {
  position: "absolute",
  width: 0,
  height: 0,
  visibility: "hidden",
  overflow: "scroll",
  whiteSpace: "pre"
}, Se = [
  "font-family",
  "font-size",
  "font-style",
  "font-weight",
  "letter-spacing",
  "text-transform"
];
function Ae({ allowResize: e = !0, text: t }) {
  const n = m(null), { inputRef: o } = p(d), [a, c] = Q(0);
  return C(() => {
    if (o.current) {
      const r = window.getComputedStyle(o.current);
      Se.forEach((u) => {
        var f;
        const s = r.getPropertyValue(u);
        (f = n.current) == null || f.style.setProperty(u, s);
      });
    }
  }, [o, n]), C(() => {
    var r, u;
    if (e) {
      const s = Math.ceil((u = (r = n.current) == null ? void 0 : r.scrollWidth) != null ? u : 0) + 2;
      a !== s && c(s);
    }
  }, [e, t, a]), {
    width: a,
    sizerProps: {
      ref: n,
      style: Oe
    }
  };
}
function Pe() {
  var c;
  const { inputRef: e, manager: t, tagListRef: n } = p(d), o = t.flags.tagsDeleted.length, a = (c = n.current) == null ? void 0 : c.contains(document.activeElement);
  C(() => {
    var r, u;
    if (o) {
      const s = (r = n.current) == null ? void 0 : r.contains(document.activeElement);
      a && !s && ((u = e.current) == null || u.focus());
    }
  }, [e, a, n, o]);
}
function Ne({
  newOptionText: e,
  noOptionsText: t,
  onValidate: n
}) {
  return T(() => ({
    newTagOption(o) {
      return {
        disabled: typeof n == "function" ? !n(o) : !1,
        label: e,
        value: j
      };
    },
    noTagsOption() {
      return {
        disabled: !0,
        label: t,
        value: ee
      };
    }
  }), [e, t, n]);
}
function ke() {
  const { id: e, listBoxRef: t, manager: n } = p(d);
  return C(() => {
    var o;
    n.state.activeIndex === -1 && ((o = t.current) == null || o.scrollTo({ top: 0 }));
  }, [t, n.state.activeIndex]), {
    "aria-labelledby": O(e),
    id: X(e),
    ref: t,
    role: "listbox"
  };
}
var g = /* @__PURE__ */ ((e) => (e[e.ClearActiveIndex = 0] = "ClearActiveIndex", e[e.ClearAll = 1] = "ClearAll", e[e.ClearValue = 2] = "ClearValue", e[e.Collapse = 3] = "Collapse", e[e.Expand = 4] = "Expand", e[e.UpdateActiveIndex = 5] = "UpdateActiveIndex", e[e.UpdateSelected = 6] = "UpdateSelected", e[e.UpdateSuggestions = 7] = "UpdateSuggestions", e[e.UpdateValue = 8] = "UpdateValue", e))(g || {});
function _e(e, t) {
  const n = t - 1;
  return e > n ? -1 : e < -1 ? n : e;
}
function Be(e, t) {
  if (t.type === 0)
    return {
      ...e,
      activeIndex: -1,
      activeOption: null
    };
  if (t.type === 1)
    return {
      ...e,
      activeIndex: -1,
      activeOption: null,
      isExpanded: !1,
      options: [...e.suggestions],
      value: ""
    };
  if (t.type === 2) {
    const n = [...e.suggestions], o = e.activeOption ? w(e.activeOption, n) : -1;
    return {
      ...e,
      activeIndex: o,
      activeOption: n[o],
      options: n,
      value: ""
    };
  }
  if (t.type === 3)
    return {
      ...e,
      activeIndex: -1,
      activeOption: null,
      isExpanded: !1
    };
  if (t.type === 4)
    return {
      ...e,
      isExpanded: !0
    };
  if (t.type === 5) {
    const n = _e(t.payload, e.options.length);
    return {
      ...e,
      activeIndex: n,
      activeOption: e.options[n]
    };
  }
  if (t.type === 6)
    return { ...e, selected: t.payload };
  if (t.type === 7) {
    const n = e.suggestionsTransform(e.value, t.payload);
    e.allowNew && e.value && n.push(e.newTagOption(e.value)), n.length === 0 && e.value && n.push(e.noTagsOption(e.value));
    const o = e.activeOption ? w(e.activeOption, n) : -1;
    return {
      ...e,
      activeIndex: o,
      activeOption: n[o] || null,
      options: n,
      suggestions: t.payload
    };
  }
  if (t.type === 8) {
    const n = e.suggestionsTransform(t.payload, e.suggestions);
    e.allowNew && t.payload && n.push(e.newTagOption(t.payload)), n.length === 0 && t.payload && n.push(e.noTagsOption(t.payload));
    const o = e.activeOption ? w(e.activeOption, n) : -1;
    return {
      ...e,
      activeIndex: o,
      activeOption: n[o] || null,
      isExpanded: !0,
      options: n,
      value: t.payload
    };
  }
  return e;
}
function J(e, t) {
  return e === t ? [] : e.filter((n) => !t.includes(n));
}
function Ue(e) {
  const t = e.suggestionsTransform(e.value, e.suggestions);
  return { ...e, options: t };
}
function Ve(e) {
  const [t, n] = de(Be, e, Ue), o = m({
    state: null,
    flags: null,
    clearActiveIndex() {
      n({ type: g.ClearActiveIndex });
    },
    clearAll() {
      n({ type: g.ClearAll });
    },
    clearValue() {
      n({ type: g.ClearValue });
    },
    collapse() {
      n({ type: g.Collapse });
    },
    expand() {
      n({ type: g.Expand });
    },
    updateActiveIndex(a) {
      n({ type: g.UpdateActiveIndex, payload: a });
    },
    updateSelected(a) {
      n({ type: g.UpdateSelected, payload: a });
    },
    updateSuggestions(a) {
      n({ type: g.UpdateSuggestions, payload: a });
    },
    updateValue(a) {
      n({ type: g.UpdateValue, payload: a });
    }
  });
  return o.current.flags = {
    tagsAdded: o.current.state ? J(t.selected, o.current.state.selected) : [],
    tagsDeleted: o.current.state ? J(o.current.state.selected, t.selected) : []
  }, o.current.state = t, e.selected !== t.selected && o.current.updateSelected(e.selected), e.suggestions !== t.suggestions && o.current.updateSuggestions(e.suggestions), o.current;
}
function Le(e, t) {
  if ((e == null ? void 0 : e.value) === j && e.disabled === !1)
    return { value: t, label: t };
}
function Ke(e) {
  const t = Le(e.activeOption, e.value) || e.activeOption || Ce(e.value, e.options);
  return t && !t.disabled ? t : void 0;
}
function $e({
  closeOnSelect: e,
  manager: t,
  onAdd: n,
  onDelete: o
}) {
  return R(
    (a) => {
      if (a != null || (a = Ke(t.state)), !a)
        return;
      const c = w(a, t.state.selected);
      c >= 0 ? o(c) : (n(a), e ? t.clearAll() : t.clearValue());
    },
    [e, t, o, n]
  );
}
function Fe(e) {
  var E;
  const { id: t, inputRef: n, manager: o, onSelect: a } = p(d), c = m(null), r = o.state.options[e], u = e === o.state.activeIndex, s = (E = r.disabled) != null ? E : !1, f = w(r, o.state.selected) > -1, v = R(() => {
    var x;
    a(), (x = n.current) == null || x.focus();
  }, [n, a]), y = R(() => {
    e !== o.state.activeIndex && o.updateActiveIndex(e);
  }, [e, o]);
  return C(() => {
    var x;
    u && ((x = c.current) == null || x.scrollIntoView({ block: "nearest", inline: "start" }));
  }, [u]), {
    option: {
      ...r,
      active: u,
      disabled: s,
      index: e,
      selected: f
    },
    optionProps: {
      "aria-disabled": s,
      "aria-posinset": e + 1,
      "aria-selected": s ? void 0 : f,
      "aria-setsize": o.state.options.length,
      id: Y(t, r),
      onClick: v,
      onMouseDown: y,
      ref: c,
      role: "option",
      tabIndex: -1
    }
  };
}
function ze({ inputRef: e, manager: t }) {
  return m({
    input: {
      clear() {
        t.clearValue();
      },
      focus() {
        var o;
        (o = e.current) == null || o.focus();
      },
      get value() {
        return t.state.value;
      },
      set value(o) {
        t.updateValue(o);
      }
    },
    listBox: {
      collapse() {
        t.collapse();
      },
      expand() {
        t.expand();
      },
      get activeIndex() {
        return t.state.activeIndex;
      },
      set activeIndex(o) {
        t.updateActiveIndex(o);
      },
      get isExpanded() {
        return t.state.isExpanded;
      },
      get options() {
        return t.state.options;
      }
    }
  }).current;
}
function We() {
  const [e, t] = Q(!1), { id: n, inputRef: o, rootRef: a } = p(d), c = T(() => ({
    "aria-describedby": O(n),
    id: n,
    onFocus() {
      t(!0);
    },
    onBlur() {
      var r;
      (r = a.current) != null && r.contains(document.activeElement) || t(!1);
    },
    onClick() {
      var r;
      document.activeElement === a.current && ((r = o.current) == null || r.focus());
    },
    ref: a,
    tabIndex: -1
  }), [o, n, a]);
  return {
    isActive: e,
    rootProps: c
  };
}
function je(e, t) {
  const { isDisabled: n, manager: o, onSelect: a } = p(d), c = o.state.selected[e], r = R(() => a(c), [a, c]);
  return {
    tag: c,
    tagProps: {
      "aria-disabled": n,
      title: D(t, c.label),
      onClick: n ? W : r
    }
  };
}
const He = {
  position: "absolute",
  width: 1,
  height: 1,
  left: -9999,
  overflow: "hidden",
  clip: "rect(0 0 0 0)"
};
function qe({ ariaAddedText: e, ariaDeletedText: t }) {
  const { manager: n } = p(d), o = m([]);
  return n.flags.tagsAdded.forEach((a) => {
    o.current.push(D(e, a.label));
  }), n.flags.tagsDeleted.forEach((a) => {
    o.current.push(D(t, a.label));
  }), /* @__PURE__ */ i.createElement("div", {
    "aria-live": "polite",
    "aria-relevant": "additions",
    role: "status",
    style: He
  }, o.current.join(`
`));
}
function Ge({ children: e }) {
  const { classNames: t } = p(d), n = Re();
  return /* @__PURE__ */ i.createElement("div", {
    className: t.comboBox,
    ...n
  }, e);
}
function Je({
  allowBackspace: e = !0,
  allowResize: t = !0,
  allowTab: n = !1,
  ariaDescribedBy: o,
  ariaErrorMessage: a,
  placeholderText: c
}) {
  const { classNames: r } = p(d), { value: u, ...s } = Te({
    allowBackspace: e,
    allowTab: n,
    ariaDescribedBy: o,
    ariaErrorMessage: a
  }), f = u.length < c.length ? c : u, { sizerProps: v, width: y } = Ae({ allowResize: t, text: f });
  return /* @__PURE__ */ i.createElement(i.Fragment, null, /* @__PURE__ */ i.createElement("input", {
    className: r.input,
    placeholder: c,
    style: { width: y },
    value: u,
    ...s
  }), t ? /* @__PURE__ */ i.createElement("div", {
    ...v
  }, f) : null);
}
const Qe = ({ children: e, classNames: t, id: n }) => /* @__PURE__ */ i.createElement("div", {
  className: t.label,
  id: n
}, e);
function Xe({ children: e, render: t = Qe }) {
  const { classNames: n, id: o } = p(d);
  return t({ children: e, classNames: n, id: O(o) });
}
function Ye({ children: e }) {
  const { classNames: t, manager: n } = p(d), o = ke();
  return !n.state.isExpanded || i.Children.count(e) === 0 ? null : /* @__PURE__ */ i.createElement("div", {
    className: t.listBox,
    ...o
  }, e);
}
function Ze({ label: e, query: t }) {
  return /* @__PURE__ */ i.createElement("span", null, D(e, t));
}
const Me = i.memo(Ze), et = ({ children: e, classNames: t, option: n, ...o }) => {
  const a = [t.option];
  return n.active && a.push(t.optionIsActive), /* @__PURE__ */ i.createElement("div", {
    className: a.join(" "),
    ...o
  }, e);
};
function tt({ index: e, render: t = et }) {
  const { classNames: n, manager: o } = p(d), { option: a, optionProps: c } = Fe(e), r = a.value === j || a.value === ee ? /* @__PURE__ */ i.createElement(Me, {
    label: a.label,
    query: o.state.value
  }) : /* @__PURE__ */ i.createElement(at, {
    label: a.label,
    query: o.state.value
  });
  return t({ classNames: n, children: r, option: a, ...c });
}
function nt(e, t) {
  const n = M(t);
  return e.replace(n, "<mark>$&</mark>");
}
function ot({ label: e, query: t }) {
  return /* @__PURE__ */ i.createElement("span", {
    dangerouslySetInnerHTML: { __html: nt(e, t) }
  });
}
const at = i.memo(ot);
function st({ children: e }) {
  Pe();
  const { classNames: t, isDisabled: n, isInvalid: o } = p(d), { isActive: a, rootProps: c } = We(), r = [t.root];
  return a && r.push(t.rootIsActive), n && r.push(t.rootIsDisabled), o && r.push(t.rootIsInvalid), /* @__PURE__ */ i.createElement("div", {
    className: r.join(" "),
    ...c
  }, e);
}
const rt = ({ classNames: e, tag: t, ...n }) => /* @__PURE__ */ i.createElement("button", {
  type: "button",
  className: e.tag,
  ...n
}, /* @__PURE__ */ i.createElement("span", {
  className: e.tagName
}, t.label));
function lt({ render: e = rt, index: t, title: n }) {
  const { classNames: o } = p(d), { tag: a, tagProps: c } = je(t, n);
  return e({ classNames: o, tag: a, ...c });
}
function it({ children: e, label: t }) {
  const { classNames: n, tagListRef: o } = p(d);
  return /* @__PURE__ */ i.createElement("ul", {
    className: n.tagList,
    "aria-label": t,
    ref: o,
    role: "list"
  }, e.map((a) => /* @__PURE__ */ i.createElement("li", {
    className: n.tagListItem,
    key: a.key,
    role: "listitem"
  }, a)));
}
const ct = {
  root: "react-tags",
  rootIsActive: "is-active",
  rootIsDisabled: "is-disabled",
  rootIsInvalid: "is-invalid",
  label: "react-tags__label",
  tagList: "react-tags__list",
  tagListItem: "react-tags__list-item",
  tag: "react-tags__tag",
  tagName: "react-tags__tag-name",
  comboBox: "react-tags__combobox",
  input: "react-tags__combobox-input",
  listBox: "react-tags__listbox",
  noOptions: "react-tags__listbox-no-options",
  option: "react-tags__listbox-option",
  optionIsActive: "is-active"
};
function ut({
  allowBackspace: e = !0,
  allowNew: t = !1,
  allowResize: n = !0,
  allowTab: o = !1,
  ariaAddedText: a = "Added tag %value%",
  ariaDescribedBy: c,
  ariaErrorMessage: r,
  ariaDeletedText: u = "Removed tag %value%",
  classNames: s = ct,
  closeOnSelect: f = !1,
  deleteButtonText: v = "Remove %value% from the list",
  id: y = "react-tags",
  isDisabled: E = !1,
  isInvalid: x = !1,
  labelText: S = "Select tags",
  newOptionText: A = "Add %value%",
  noOptionsText: P = "No options found for %value%",
  onAdd: N,
  onDelete: k,
  onInput: _,
  onValidate: B,
  placeholderText: U = "Add a tag",
  renderLabel: V,
  renderOption: L,
  renderTag: H,
  selected: l = [],
  suggestions: I = [],
  suggestionsTransform: te = we,
  tagListLabelText: ne = "Selected tags"
}, K) {
  var G;
  const oe = m(null), q = m(null), ae = m(null), se = m(null), re = m(null), { newTagOption: le, noTagsOption: ie } = Ne({
    newOptionText: A,
    noOptionsText: P,
    onValidate: B
  }), h = Ve({
    activeIndex: -1,
    activeOption: null,
    allowNew: t,
    isExpanded: !1,
    newTagOption: le,
    noTagsOption: ie,
    options: [],
    selected: l,
    suggestions: I,
    suggestionsTransform: te,
    value: ""
  }), ce = $e({ closeOnSelect: f, manager: h, onAdd: N, onDelete: k }), ue = ze({ inputRef: q, manager: h });
  return K && ((G = K.current) != null || (K.current = ue)), /* @__PURE__ */ i.createElement(d.Provider, {
    value: {
      classNames: s,
      comboBoxRef: oe,
      id: y,
      inputRef: q,
      isDisabled: E,
      isInvalid: x,
      listBoxRef: ae,
      manager: h,
      onInput: _,
      onSelect: ce,
      rootRef: se,
      tagListRef: re
    }
  }, /* @__PURE__ */ i.createElement(st, null, /* @__PURE__ */ i.createElement(Xe, {
    render: V
  }, S), /* @__PURE__ */ i.createElement(it, {
    label: ne
  }, h.state.selected.map(($, F) => /* @__PURE__ */ i.createElement(lt, {
    key: z($),
    index: F,
    render: H,
    title: v
  }))), /* @__PURE__ */ i.createElement(Ge, null, /* @__PURE__ */ i.createElement(Je, {
    allowBackspace: e,
    allowResize: n,
    allowTab: o,
    placeholderText: U,
    ariaDescribedBy: c,
    ariaErrorMessage: r
  }), /* @__PURE__ */ i.createElement(Ye, null, h.state.options.map(($, F) => /* @__PURE__ */ i.createElement(tt, {
    key: z($),
    index: F,
    render: L
  })))), /* @__PURE__ */ i.createElement(qe, {
    ariaAddedText: a,
    ariaDeletedText: u
  })));
}
const pt = i.forwardRef(ut);
export {
  pt as ReactTags
};
