import { DataObject } from '@twurple/common';
import type { ApiClient } from '../../../ApiClient';
import type { HelixPaginatedRequest } from '../HelixPaginatedRequest';
import type { HelixPaginatedResult } from '../HelixPaginatedResult';
import type { HelixPagination } from '../HelixPagination';
import type { HelixStream, HelixStreamData } from '../stream/HelixStream';
/** @private */
export interface HelixGameData {
    id: string;
    name: string;
    box_art_url: string;
}
/**
 * A game as displayed on Twitch.
 */
export declare class HelixGame extends DataObject<HelixGameData> {
    private readonly _client;
    /** @private */
    constructor(data: HelixGameData, client: ApiClient);
    /**
     * The ID of the game.
     */
    get id(): string;
    /**
     * The name of the game.
     */
    get name(): string;
    /**
     * The URL of the box art of the game.
     */
    get boxArtUrl(): string;
    /**
     * Builds the URL of the box art of the game using the given dimensions.
     *
     * @param width The width of the box art.
     * @param height The height of the box art.
     */
    getBoxArtUrl(width: number, height: number): string;
    /**
     * Retrieves streams that are currently playing the game.
     *
     * @param pagination
     * @expandParams
     */
    getStreams(pagination?: HelixPagination): Promise<HelixPaginatedResult<HelixStream>>;
    /**
     * Creates a paginator for streams that are currently playing the game.
     */
    getStreamsPaginated(): HelixPaginatedRequest<HelixStreamData, HelixStream>;
}
//# sourceMappingURL=HelixGame.d.ts.map