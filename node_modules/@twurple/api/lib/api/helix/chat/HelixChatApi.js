"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixChatApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixChannelEmote_1 = require("./HelixChannelEmote");
const HelixChatBadgeSet_1 = require("./HelixChatBadgeSet");
const HelixChatSettings_1 = require("./HelixChatSettings");
const HelixEmote_1 = require("./HelixEmote");
const HelixEmoteFromSet_1 = require("./HelixEmoteFromSet");
const HelixPrivilegedChatSettings_1 = require("./HelixPrivilegedChatSettings");
/**
 * The Helix API methods that deal with chat.
 *
 * Can be accessed using `client.chat` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const rewards = await api.chat.getChannelBadges('125328655');
 * ```
 */
let HelixChatApi = class HelixChatApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves all global badges.
     */
    async getGlobalBadges() {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/badges/global'
        });
        return result.data.map(data => new HelixChatBadgeSet_1.HelixChatBadgeSet(data));
    }
    /**
     * Retrieves all badges specific to the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve badges for.
     */
    async getChannelBadges(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/badges',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcaster)
            }
        });
        return result.data.map(data => new HelixChatBadgeSet_1.HelixChatBadgeSet(data));
    }
    /**
     * Retrieves all global emotes.
     */
    async getGlobalEmotes() {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/emotes/global'
        });
        return result.data.map(data => new HelixEmote_1.HelixEmote(data));
    }
    /**
     * Retrieves all emotes from a channel.
     *
     * @param channel The channel to retrieve emotes from.
     */
    async getChannelEmotes(channel) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/emotes',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(channel)
            }
        });
        return result.data.map(data => new HelixChannelEmote_1.HelixChannelEmote(data, this._client));
    }
    /**
     * Retrieves all emotes from a list of emote sets.
     *
     * @param setIds The IDs of the emote sets to retrieve emotes from.
     */
    async getEmotesFromSets(setIds) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/emotes/set',
            query: {
                emote_set_id: setIds
            }
        });
        return result.data.map(data => new HelixEmoteFromSet_1.HelixEmoteFromSet(data, this._client));
    }
    /**
     * Retrieves the settings of a broadcaster's chat.
     *
     * @param broadcaster The broadcaster the chat belongs to.
     */
    async getSettings(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/settings',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcaster)
            }
        });
        return new HelixChatSettings_1.HelixChatSettings(result.data[0]);
    }
    /**
     * Retrieves the settings of a broadcaster's chat, including the delay settings.
     *
     * @param broadcaster The broadcaster the chat belongs to.
     * @param moderator The moderator the request is on behalf of.
     *
     * This is the user your user token needs to represent.
     * You can get your own settings by setting `broadcaster` and `moderator` to the same user.
     */
    async getSettingsPrivileged(broadcaster, moderator) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/settings',
            scope: 'moderator:read:chat_settings',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcaster),
                moderator_id: (0, common_1.extractUserId)(moderator)
            }
        });
        return new HelixPrivilegedChatSettings_1.HelixPrivilegedChatSettings(result.data[0]);
    }
    /**
     * Updates the settings of a broadcaster's chat.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster the chat belongs to.
     * @param moderator The moderator the request is on behalf of.
     *
     * This is the user your user token needs to represent.
     * You can get your own settings by setting `broadcaster` and `moderator` to the same user.
     * @param settings The settings to change.
     */
    async updateSettings(broadcaster, moderator, settings) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/settings',
            method: 'PATCH',
            scope: 'moderator:manage:chat_settings',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcaster),
                moderator_id: (0, common_1.extractUserId)(moderator)
            },
            jsonBody: {
                slow_mode: settings.slowModeEnabled,
                slow_mode_wait_time: settings.slowModeDelay,
                follower_mode: settings.followerOnlyModeEnabled,
                follower_mode_duration: settings.followerOnlyModeDelay,
                subscriber_mode: settings.subscriberOnlyModeEnabled,
                emote_mode: settings.emoteOnlyModeEnabled,
                unique_chat_mode: settings.uniqueChatModeEnabled,
                non_moderator_chat_delay: settings.nonModeratorChatDelayEnabled,
                non_moderator_chat_delay_duration: settings.nonModeratorChatDelay
            }
        });
        return new HelixPrivilegedChatSettings_1.HelixPrivilegedChatSettings(result.data[0]);
    }
    /**
     * Sends an announcement to a broadcaster's chat.
     *
     * @param broadcaster The broadcaster the chat belongs to.
     * @param moderator The moderator the request is on behalf of.
     *
     * This is the user your user token needs to represent.
     * You can send an announcement to your own chat by setting `broadcaster` and `moderator` to the same user.
     * @param announcement The announcement to send.
     */
    async sendAnnouncement(broadcaster, moderator, announcement) {
        await this._client.callApi({
            type: 'helix',
            url: 'chat/announcements',
            method: 'POST',
            scope: 'moderator:manage:announcements',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcaster),
                moderator_id: (0, common_1.extractUserId)(moderator)
            },
            jsonBody: {
                message: announcement.message,
                color: announcement.color
            }
        });
    }
    /**
     * Retrieves the chat colors for a list of users.
     *
     * Returns a Map with user IDs as keys and their colors as values.
     * The value is a color hex code, or `null` if the user did not set a color,
     * and unknown users will not be present in the map.
     *
     * @param users The users to get the chat colors of.
     */
    async getColorsForUsers(users) {
        const response = await this._client.callApi({
            type: 'helix',
            url: 'chat/color',
            query: {
                user_id: users.map(common_1.extractUserId)
            }
        });
        return new Map(response.data.map(data => [data.user_id, data.color || null]));
    }
    /**
     * Retrieves the chat color for a user.
     *
     * Returns the color as hex code, `null` if the user did not set a color, or `undefined` if the user is unknown.
     *
     * @param user The user to get the chat color of.
     */
    async getColorForUser(user) {
        const userId = (0, common_1.extractUserId)(user);
        const result = await this.getColorsForUsers([userId]);
        return result.get(userId);
    }
    /**
     * Changes the chat color for a user.
     *
     * @param user The user to change the color of.
     * @param color The color to set.
     *
     * Note that hex codes can only be used by users that have a Prime or Turbo subscription.
     */
    async setColorForUser(user, color) {
        await this._client.callApi({
            type: 'helix',
            url: 'chat/color',
            method: 'PUT',
            scope: 'user:manage:chat_color',
            query: {
                user_id: (0, common_1.extractUserId)(user),
                color
            }
        });
    }
};
HelixChatApi = tslib_1.__decorate([
    (0, common_1.rtfm)('api', 'HelixChatApi')
], HelixChatApi);
exports.HelixChatApi = HelixChatApi;
