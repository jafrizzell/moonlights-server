import type { UserIdResolvable } from '@twurple/common';
import { BaseApi } from '../../BaseApi';
import { HelixPaginatedRequest } from '../HelixPaginatedRequest';
import type { HelixPaginatedResult } from '../HelixPaginatedResult';
import type { HelixForwardPagination } from '../HelixPagination';
import { HelixAutoModSettings } from './HelixAutoModSettings';
import { HelixAutoModStatus } from './HelixAutoModStatus';
import type { HelixBanData } from './HelixBan';
import { HelixBan } from './HelixBan';
import { HelixBanUser } from './HelixBanUser';
import { HelixBlockedTerm } from './HelixBlockedTerm';
import type { HelixModeratorData } from './HelixModerator';
import { HelixModerator } from './HelixModerator';
/**
 * Filters for the banned users request.
 */
export interface HelixBanFilter extends HelixForwardPagination {
    /**
     * A user ID or a list thereof.
     */
    userId: string | string[];
}
/**
 * Filters for the moderators request.
 */
export interface HelixModeratorFilter extends HelixForwardPagination {
    /**
     * A user ID or a list thereof.
     */
    userId: string | string[];
}
export interface HelixCheckAutoModStatusData {
    /**
     * The developer-generated ID for mapping messages to their status results.
     */
    messageId: string;
    /**
     * The text of the message the AutoMod status needs to be checked for.
     */
    messageText: string;
    /**
     * The ID of the sender of the message the AutoMod status needs to be checked for.
     *
     * @deprecated This is no longer used by Twitch.
     */
    userId?: string;
}
export declare type HelixAutoModSettingsUpdate = Exclude<HelixAutoModSettings, 'broadcasterId' | 'moderatorId'>;
/**
 * Information about a user to be banned/timed out from a channel.
 */
export interface HelixBanUserRequest {
    /**
     * The duration (in seconds) that the user should be timed out. If this value is null, the user will be banned.
     */
    duration?: number;
    /**
     * The reason why the user is being timed out/banned.
     */
    reason: string;
    /**
     * The ID of the user who is to be banned/timed out.
     */
    userId: string;
}
/**
 * The Helix API methods that deal with moderation.
 *
 * Can be accessed using `client.moderation` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: users } = await api.moderation.getBannedUsers('61369223');
 * ```
 */
export declare class HelixModerationApi extends BaseApi {
    /**
     * Retrieves a list of banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     * @param filter Additional filters for the result set.
     */
    getBannedUsers(channel: UserIdResolvable, filter?: HelixBanFilter): Promise<HelixPaginatedResult<HelixBan>>;
    /**
     * Creates a paginator for banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     */
    getBannedUsersPaginated(channel: UserIdResolvable): HelixPaginatedRequest<HelixBanData, HelixBan>;
    /**
     * Checks whether a given user is banned in a given channel.
     *
     * @param channel The channel to check for a ban of the given user.
     * @param user The user to check for a ban in the given channel.
     */
    checkUserBan(channel: UserIdResolvable, user: UserIdResolvable): Promise<boolean>;
    /**
     * Retrieves a list of moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     * @param filter Additional filters for the result set.
     */
    getModerators(channel: UserIdResolvable, filter?: HelixModeratorFilter): Promise<HelixPaginatedResult<HelixModerator>>;
    /**
     * Creates a paginator for moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     */
    getModeratorsPaginated(channel: UserIdResolvable): HelixPaginatedRequest<HelixModeratorData, HelixModerator>;
    /**
     * Checks whether a given user is a moderator of a given channel.
     *
     * @param channel The channel to check.
     * @param user The user to check.
     */
    checkUserMod(channel: UserIdResolvable, user: UserIdResolvable): Promise<boolean>;
    /**
     * Adds a moderator to the broadcaster’s chat room.
     *
     * @param broadcaster The ID of the broadcaster that owns the chat room. This ID must match the user ID in the access token.
     * @param user The ID of the user to add as a moderator in the broadcaster’s chat room.
     */
    addModerator(broadcaster: UserIdResolvable, user: UserIdResolvable): Promise<void>;
    /**
     * Removes a moderator from the broadcaster’s chat room.
     *
     * @param broadcaster The ID of the broadcaster that owns the chat room. This ID must match the user ID in the access token.
     * @param user The ID of the user to remove as a moderator from the broadcaster’s chat room.
     */
    removeModerator(broadcaster: UserIdResolvable, user: UserIdResolvable): Promise<void>;
    /**
     * Determines whether a string message meets the channel's AutoMod requirements.
     *
     * @param channel The channel in which the messages to check are posted.
     * @param data An array of message data objects.
     */
    checkAutoModStatus(channel: UserIdResolvable, data: HelixCheckAutoModStatusData[]): Promise<HelixAutoModStatus[]>;
    /**
     * Processes a message held by AutoMod.
     *
     * @param user The user who is processing the message.
     * @param msgId The ID of the message.
     * @param allow Whether to allow the message - `true` allows, and `false` denies.
     */
    processHeldAutoModMessage(user: UserIdResolvable, msgId: string, allow: boolean): Promise<void>;
    /**
     * Retrieves the AutoMod settings for a broadcaster.
     *
     * @param broadcasterId The ID of the broadcaster for which the AutoMod settings are retrieved.
     * @param moderatorId The ID of a user that has permission to moderate the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     */
    getAutoModSettings(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable): Promise<HelixAutoModSettings[]>;
    /**
     * Updates the AutoMod settings for a broadcaster.
     *
     * @param broadcasterId The ID of the broadcaster for which the AutoMod settings are updated.
     * @param moderatorId The ID of a user that has permission to moderate the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     * @param data The updated AutoMod settings that replace the current AutoMod settings.
     */
    updateAutoModSettings(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable, data: HelixAutoModSettingsUpdate): Promise<HelixAutoModSettings[]>;
    /**
     * Bans or times out a user in a channel
     *
     * @param broadcasterId The ID of the broadcaster in whose channel the user will be banned/timed out.
     * @param moderatorId The ID of a user that has permission to ban/timeout users in the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     * @param data
     *
     * @expandParams
     *
     * @returns The result data from the ban/timeout request.
     */
    banUser(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable, data: HelixBanUserRequest): Promise<HelixBanUser[]>;
    /**
     * Unbans/removes the timeout for a user in a channel.
     *
     * @param broadcasterId The ID of the broadcaster in whose channel the user will be unbanned/removed from timeout.
     * @param moderatorId The ID of a user that has permission to unban/remove timeout users in the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     * @param userId The ID of the user who will be unbanned/removed from timeout.
     */
    unbanUser(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable, userId: UserIdResolvable): Promise<void>;
    /**
     * Gets the broadcaster’s list of non-private, blocked words or phrases.
     *
     * @param broadcasterId The ID of the broadcaster for whose channel blocked terms will be retrieved.
     * @param moderatorId The ID of a user that has permission to retrieve blocked terms for the broadcaster's channel.
     * This must match the user ID associated with the user OAuth token.
     * @param pagination
     *
     * @expandParams
     *
     * @returns A paginated list of blocked term data in the broadcaster's channel.
     */
    getBlockedTerms(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable, pagination?: HelixForwardPagination): Promise<HelixPaginatedResult<HelixBlockedTerm>>;
    /**
     * Adds a blocked term to the broadcaster's channel.
     *
     * @param broadcasterId The ID of the broadcaster in whose channel the term will be blocked.
     * @param moderatorId The ID of a user that has permission to block terms in the broadcaster's channel.
     * This must match the user ID associated with the user OAuth token.
     * @param text The word or phrase to block from being used in the broadcaster's channel.
     *
     * @returns Information about the term that has been blocked.
     */
    addBlockedTerm(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable, text: string): Promise<HelixBlockedTerm[]>;
    /**
     * Removes a blocked term from the broadcaster's channel.
     *
     * @param broadcasterId The ID of the broadcaster in whose channel the term will be unblocked.
     * @param moderatorId The ID of a user that has permission to unblock terms in the broadcaster's channel.
     * This must match the user ID associated with the user OAuth token.
     * @param id The ID of the term that should be unblocked.
     */
    removeBlockedTerm(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable, id: string): Promise<void>;
    /**
     * Removes a single chat message or all chat messages from the broadcaster’s chat room.
     *
     * @param broadcaster The broadcaster the chat belongs to.
     * @param moderator The moderator the request is on behalf of.
     *
     * This is the user your user token needs to represent.
     * You can delete messages from your own chat room by setting `broadcaster` and `moderator` to the same user.
     * @param messageId The ID of the message to remove. If not specified, the request removes all messages in the broadcaster’s chat room.
     */
    deleteChatMessages(broadcaster: UserIdResolvable, moderator: UserIdResolvable, messageId?: string): Promise<void>;
}
//# sourceMappingURL=HelixModerationApi.d.ts.map