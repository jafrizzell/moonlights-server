"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixModerationApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixAutoModSettings_1 = require("./HelixAutoModSettings");
const HelixAutoModStatus_1 = require("./HelixAutoModStatus");
const HelixBan_1 = require("./HelixBan");
const HelixBanUser_1 = require("./HelixBanUser");
const HelixBlockedTerm_1 = require("./HelixBlockedTerm");
const HelixModerator_1 = require("./HelixModerator");
/**
 * The Helix API methods that deal with moderation.
 *
 * Can be accessed using `client.moderation` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: users } = await api.moderation.getBannedUsers('61369223');
 * ```
 */
let HelixModerationApi = class HelixModerationApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     * @param filter Additional filters for the result set.
     */
    async getBannedUsers(channel, filter) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/banned',
            scope: 'moderation:read',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(channel),
                user_id: filter === null || filter === void 0 ? void 0 : filter.userId,
                ...(0, HelixPagination_1.makePaginationQuery)(filter)
            }
        });
        return (0, HelixPaginatedResult_1.createPaginatedResult)(result, HelixBan_1.HelixBan, this._client);
    }
    /**
     * Creates a paginator for banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     */
    getBannedUsersPaginated(channel) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'moderation/banned',
            scope: 'moderation:read',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(channel)
            }
        }, this._client, data => new HelixBan_1.HelixBan(data, this._client), 50 // possibly a relatively consistent workaround for twitchdev/issues#18
        );
    }
    /**
     * Checks whether a given user is banned in a given channel.
     *
     * @param channel The channel to check for a ban of the given user.
     * @param user The user to check for a ban in the given channel.
     */
    async checkUserBan(channel, user) {
        const userId = (0, common_1.extractUserId)(user);
        const result = await this.getBannedUsers(channel, { userId });
        return result.data.some(ban => ban.userId === userId);
    }
    /**
     * Retrieves a list of moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     * @param filter Additional filters for the result set.
     */
    async getModerators(channel, filter) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/moderators',
            scope: 'moderation:read',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(channel),
                user_id: filter === null || filter === void 0 ? void 0 : filter.userId,
                ...(0, HelixPagination_1.makePaginationQuery)(filter)
            }
        });
        return (0, HelixPaginatedResult_1.createPaginatedResult)(result, HelixModerator_1.HelixModerator, this._client);
    }
    /**
     * Creates a paginator for moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     */
    getModeratorsPaginated(channel) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'moderation/moderators',
            scope: 'moderation:read',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(channel)
            }
        }, this._client, data => new HelixModerator_1.HelixModerator(data, this._client));
    }
    /**
     * Checks whether a given user is a moderator of a given channel.
     *
     * @param channel The channel to check.
     * @param user The user to check.
     */
    async checkUserMod(channel, user) {
        const userId = (0, common_1.extractUserId)(user);
        const result = await this.getModerators(channel, { userId });
        return result.data.some(mod => mod.userId === userId);
    }
    /**
     * Adds a moderator to the broadcaster’s chat room.
     *
     * @param broadcaster The ID of the broadcaster that owns the chat room. This ID must match the user ID in the access token.
     * @param user The ID of the user to add as a moderator in the broadcaster’s chat room.
     */
    async addModerator(broadcaster, user) {
        await this._client.callApi({
            type: 'helix',
            url: 'moderation/moderators',
            method: 'POST',
            scope: 'channel:manage:moderators',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcaster),
                user_id: (0, common_1.extractUserId)(user)
            }
        });
    }
    /**
     * Removes a moderator from the broadcaster’s chat room.
     *
     * @param broadcaster The ID of the broadcaster that owns the chat room. This ID must match the user ID in the access token.
     * @param user The ID of the user to remove as a moderator from the broadcaster’s chat room.
     */
    async removeModerator(broadcaster, user) {
        await this._client.callApi({
            type: 'helix',
            url: 'moderation/moderators',
            method: 'DELETE',
            scope: 'channel:manage:moderators',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcaster),
                user_id: (0, common_1.extractUserId)(user)
            }
        });
    }
    /**
     * Determines whether a string message meets the channel's AutoMod requirements.
     *
     * @param channel The channel in which the messages to check are posted.
     * @param data An array of message data objects.
     */
    async checkAutoModStatus(channel, data) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/enforcements/status',
            method: 'POST',
            scope: 'moderation:read',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(channel)
            },
            jsonBody: {
                data: data
            }
        });
        return result.data.map(statusData => new HelixAutoModStatus_1.HelixAutoModStatus(statusData));
    }
    /**
     * Processes a message held by AutoMod.
     *
     * @param user The user who is processing the message.
     * @param msgId The ID of the message.
     * @param allow Whether to allow the message - `true` allows, and `false` denies.
     */
    async processHeldAutoModMessage(user, msgId, allow) {
        await this._client.callApi({
            type: 'helix',
            url: 'moderation/automod/message',
            method: 'POST',
            scope: 'moderator:manage:automod',
            jsonBody: {
                user_id: (0, common_1.extractUserId)(user),
                msg_id: msgId,
                action: allow ? 'ALLOW' : 'DENY'
            }
        });
    }
    /**
     * Retrieves the AutoMod settings for a broadcaster.
     *
     * @param broadcasterId The ID of the broadcaster for which the AutoMod settings are retrieved.
     * @param moderatorId The ID of a user that has permission to moderate the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     */
    async getAutoModSettings(broadcasterId, moderatorId) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/automod/settings',
            scope: 'moderator:read:automod_settings',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcasterId),
                moderator_id: (0, common_1.extractUserId)(moderatorId)
            }
        });
        return result.data.map(data => new HelixAutoModSettings_1.HelixAutoModSettings(data));
    }
    /**
     * Updates the AutoMod settings for a broadcaster.
     *
     * @param broadcasterId The ID of the broadcaster for which the AutoMod settings are updated.
     * @param moderatorId The ID of a user that has permission to moderate the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     * @param data The updated AutoMod settings that replace the current AutoMod settings.
     */
    async updateAutoModSettings(broadcasterId, moderatorId, data) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/automod/settings',
            method: 'PUT',
            scope: 'moderator:manage:automod_settings',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcasterId),
                moderator_id: (0, common_1.extractUserId)(moderatorId)
            },
            jsonBody: {
                overall_level: data.overallLevel,
                aggression: data.aggression,
                bullying: data.bullying,
                disability: data.disability,
                misogyny: data.misogyny,
                race_ethnicity_or_religion: data.raceEthnicityOrReligion,
                sex_based_terms: data.sexBasedTerms,
                sexuality_sex_or_gender: data.sexualitySexOrGender,
                swearing: data.swearing
            }
        });
        return result.data.map(settingsData => new HelixAutoModSettings_1.HelixAutoModSettings(settingsData));
    }
    /**
     * Bans or times out a user in a channel
     *
     * @param broadcasterId The ID of the broadcaster in whose channel the user will be banned/timed out.
     * @param moderatorId The ID of a user that has permission to ban/timeout users in the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     * @param data
     *
     * @expandParams
     *
     * @returns The result data from the ban/timeout request.
     */
    async banUser(broadcasterId, moderatorId, data) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/bans',
            method: 'POST',
            scope: 'moderator:manage:banned_users',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcasterId),
                moderator_id: (0, common_1.extractUserId)(moderatorId)
            },
            jsonBody: {
                data: {
                    duration: data.duration,
                    reason: data.reason,
                    user_id: data.userId
                }
            }
        });
        return result.data.map(banData => new HelixBanUser_1.HelixBanUser(banData));
    }
    /**
     * Unbans/removes the timeout for a user in a channel.
     *
     * @param broadcasterId The ID of the broadcaster in whose channel the user will be unbanned/removed from timeout.
     * @param moderatorId The ID of a user that has permission to unban/remove timeout users in the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     * @param userId The ID of the user who will be unbanned/removed from timeout.
     */
    async unbanUser(broadcasterId, moderatorId, userId) {
        await this._client.callApi({
            type: 'helix',
            url: 'moderation/bans',
            method: 'DELETE',
            scope: 'moderator:manage:banned_users',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcasterId),
                moderator_id: (0, common_1.extractUserId)(moderatorId),
                user_id: (0, common_1.extractUserId)(userId)
            }
        });
    }
    /**
     * Gets the broadcaster’s list of non-private, blocked words or phrases.
     *
     * @param broadcasterId The ID of the broadcaster for whose channel blocked terms will be retrieved.
     * @param moderatorId The ID of a user that has permission to retrieve blocked terms for the broadcaster's channel.
     * This must match the user ID associated with the user OAuth token.
     * @param pagination
     *
     * @expandParams
     *
     * @returns A paginated list of blocked term data in the broadcaster's channel.
     */
    async getBlockedTerms(broadcasterId, moderatorId, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/blocked_terms',
            scope: 'moderator:read:blocked_terms',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcasterId),
                moderator_id: (0, common_1.extractUserId)(moderatorId),
                ...(0, HelixPagination_1.makePaginationQuery)(pagination)
            }
        });
        return (0, HelixPaginatedResult_1.createPaginatedResult)(result, HelixBlockedTerm_1.HelixBlockedTerm, this._client);
    }
    /**
     * Adds a blocked term to the broadcaster's channel.
     *
     * @param broadcasterId The ID of the broadcaster in whose channel the term will be blocked.
     * @param moderatorId The ID of a user that has permission to block terms in the broadcaster's channel.
     * This must match the user ID associated with the user OAuth token.
     * @param text The word or phrase to block from being used in the broadcaster's channel.
     *
     * @returns Information about the term that has been blocked.
     */
    async addBlockedTerm(broadcasterId, moderatorId, text) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/blocked_terms',
            method: 'POST',
            scope: 'moderator:manage:blocked_terms',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcasterId),
                moderator_id: (0, common_1.extractUserId)(moderatorId)
            },
            jsonBody: {
                text
            }
        });
        return result.data.map(blockedTermData => new HelixBlockedTerm_1.HelixBlockedTerm(blockedTermData));
    }
    /**
     * Removes a blocked term from the broadcaster's channel.
     *
     * @param broadcasterId The ID of the broadcaster in whose channel the term will be unblocked.
     * @param moderatorId The ID of a user that has permission to unblock terms in the broadcaster's channel.
     * This must match the user ID associated with the user OAuth token.
     * @param id The ID of the term that should be unblocked.
     */
    async removeBlockedTerm(broadcasterId, moderatorId, id) {
        await this._client.callApi({
            type: 'helix',
            url: 'moderation/blocked_terms',
            method: 'DELETE',
            scope: 'moderator:manage:blocked_terms',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcasterId),
                moderator_id: (0, common_1.extractUserId)(moderatorId),
                id
            }
        });
    }
    /**
     * Removes a single chat message or all chat messages from the broadcaster’s chat room.
     *
     * @param broadcaster The broadcaster the chat belongs to.
     * @param moderator The moderator the request is on behalf of.
     *
     * This is the user your user token needs to represent.
     * You can delete messages from your own chat room by setting `broadcaster` and `moderator` to the same user.
     * @param messageId The ID of the message to remove. If not specified, the request removes all messages in the broadcaster’s chat room.
     */
    async deleteChatMessages(broadcaster, moderator, messageId) {
        await this._client.callApi({
            type: 'helix',
            url: 'moderation/chat',
            method: 'DELETE',
            scope: 'moderator:manage:chat_messages',
            query: {
                broadcaster_id: (0, common_1.extractUserId)(broadcaster),
                moderator_id: (0, common_1.extractUserId)(moderator),
                message_id: messageId
            }
        });
    }
};
HelixModerationApi = tslib_1.__decorate([
    (0, common_1.rtfm)('api', 'HelixModerationApi')
], HelixModerationApi);
exports.HelixModerationApi = HelixModerationApi;
