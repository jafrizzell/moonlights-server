import type { ApiClient } from '../../../ApiClient';
import { HelixPaginatedRequestWithTotal } from '../HelixPaginatedRequestWithTotal';
import type { HelixPaginatedEventSubSubscriptionsResponse } from './HelixEventSubApi';
import type { HelixEventSubSubscriptionData } from './HelixEventSubSubscription';
import { HelixEventSubSubscription } from './HelixEventSubSubscription';
/**
 * A special case of {@HelixPaginatedRequestWithTotal} with support for fetching the total cost and cost limit
 * of EventSub subscriptions.
 *
 * @inheritDoc
 */
export declare class HelixPaginatedEventSubSubscriptionsRequest extends HelixPaginatedRequestWithTotal<HelixEventSubSubscriptionData, HelixEventSubSubscription> {
    /** @private */
    protected _currentData?: HelixPaginatedEventSubSubscriptionsResponse;
    /** @private */
    constructor(query: Record<string, string>, client: ApiClient);
    /**
     * Retrieves and returns the total cost of EventSub subscriptions.
     */
    getTotalCost(): Promise<number>;
    /**
     * Retrieves and returns the cost limit of EventSub subscriptions.
     */
    getMaxTotalCost(): Promise<number>;
}
//# sourceMappingURL=HelixPaginatedEventSubSubscriptionsRequest.d.ts.map