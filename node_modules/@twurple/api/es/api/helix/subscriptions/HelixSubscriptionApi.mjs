import { __decorate } from "tslib";
import { HttpStatusCodeError } from '@twurple/api-call';
import { extractUserId, rtfm } from '@twurple/common';
import { BaseApi } from "../../BaseApi.mjs";
import { HelixPaginatedRequestWithTotal } from "../HelixPaginatedRequestWithTotal.mjs";
import { createPaginatedResultWithTotal } from "../HelixPaginatedResult.mjs";
import { makePaginationQuery } from "../HelixPagination.mjs";
import { HelixSubscription } from "./HelixSubscription.mjs";
import { HelixUserSubscription } from "./HelixUserSubscription.mjs";
/**
 * The Helix API methods that deal with subscriptions.
 *
 * Can be accessed using `client.subscriptions` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const subscription = await api.subscriptions.getSubscriptionForUser('61369223', '125328655');
 * ```
 */
let HelixSubscriptionApi = class HelixSubscriptionApi extends BaseApi {
    /**
     * Retrieves a list of all subscriptions to a given broadcaster.
     *
     * @param broadcaster The broadcaster to list subscriptions to.
     * @param pagination
     *
     * @expandParams
     */
    async getSubscriptions(broadcaster, pagination) {
        const result = await this._client.callApi({
            url: 'subscriptions',
            scope: 'channel:read:subscriptions',
            type: 'helix',
            query: {
                broadcaster_id: extractUserId(broadcaster),
                ...makePaginationQuery(pagination)
            }
        });
        return {
            ...createPaginatedResultWithTotal(result, HelixSubscription, this._client),
            points: result.points
        };
    }
    /**
     * Creates a paginator for all subscriptions to a given broadcaster.
     *
     * @param broadcaster The broadcaster to list subscriptions to.
     */
    getSubscriptionsPaginated(broadcaster) {
        return new HelixPaginatedRequestWithTotal({
            url: 'subscriptions',
            scope: 'channel:read:subscriptions',
            query: {
                broadcaster_id: extractUserId(broadcaster)
            }
        }, this._client, data => new HelixSubscription(data, this._client));
    }
    /**
     * Retrieves the subset of the given user list that is subscribed to the given broadcaster.
     *
     * @param broadcaster The broadcaster to find subscriptions to.
     * @param users The users that should be checked for subscriptions.
     */
    async getSubscriptionsForUsers(broadcaster, users) {
        const result = await this._client.callApi({
            url: 'subscriptions',
            scope: 'channel:read:subscriptions',
            type: 'helix',
            query: {
                broadcaster_id: extractUserId(broadcaster),
                user_id: users.map(extractUserId)
            }
        });
        return result.data.map(data => new HelixSubscription(data, this._client));
    }
    /**
     * Retrieves the subscription data for a given user to a given broadcaster.
     *
     * This checks with the authorization of a broadcaster.
     * If you only have the authorization of a user, check {@HelixSubscriptionApi#checkUserSubscription}.
     *
     * @param broadcaster The broadcaster to check.
     * @param user The user to check.
     */
    async getSubscriptionForUser(broadcaster, user) {
        const list = await this.getSubscriptionsForUsers(broadcaster, [user]);
        return list.length ? list[0] : null;
    }
    /**
     * Checks if a given user is subscribed to a given broadcaster. Returns null if not subscribed.
     *
     * This checks with the authorization of a user.
     * If you only have the authorization of a broadcaster, check {@HelixSubscriptionApi#getSubscriptionForUser}.
     *
     * @param user The user to check.
     * @param broadcaster The broadcaster to check the user's subscription for.
     */
    async checkUserSubscription(user, broadcaster) {
        try {
            const result = await this._client.callApi({
                type: 'helix',
                url: 'subscriptions/user',
                scope: 'user:read:subscriptions',
                query: {
                    broadcaster_id: extractUserId(broadcaster),
                    user_id: extractUserId(user)
                }
            });
            return new HelixUserSubscription(result.data[0], this._client);
        }
        catch (e) {
            if (e instanceof HttpStatusCodeError && e.statusCode === 404) {
                return null;
            }
            throw e;
        }
    }
};
HelixSubscriptionApi = __decorate([
    rtfm('api', 'HelixSubscriptionApi')
], HelixSubscriptionApi);
export { HelixSubscriptionApi };
